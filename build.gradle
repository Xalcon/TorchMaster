buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.


version = version_major + '.' + version_minor + '.' + version_patch + '.' + getBuildNumber()
group= "net.xalcon.torchmaster" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "torchmaster_" + mcversion

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = mcversion + "-" + forgeversion
    runDir = "run"

    clientJvmArgs = ["-Dfml.coreMods.load=net.xalcon.torchasm.TorchCorePlugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=net.xalcon.torchasm.TorchCorePlugin"]

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = mcp_mappings
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace '@VERSION@', project.version
    replace '@BUILD_NUMBER@', getBuildNumber()
}

repositories {
    maven {
        name 'JEI'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'Hwyla'
        url 'http://tehnut.info/maven'
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    deobfCompile "mezz.jei:jei_${mcversion}:${jei_version}:api"
    //compile "mcp.mobius.waila:Hwyla:${hwyla_version}:api"

    runtime "mezz.jei:jei_${mcversion}:${jei_version}"
    //runtime "mcp.mobius.waila:Hwyla:${hwyla_version}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes 'FMLCorePlugin': "net.xalcon.torchasm.TorchCorePlugin"
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    classifier = 'non-compliant'
    includeEmptyDirs = false
}

task universalJar(type: Jar, dependsOn: 'reobfAsmJar') {
    manifest {
        attributes 'ContainedDeps': "${archivesBaseName}-${version}-coremod.jar"
    }
    from(sourceSets.main.output) {
        exclude('net/xalcon/torchasm/**') // do not include the asm stuff
    }
    from("${buildDir}/libs") {
        include("${archivesBaseName}-${version}-coremod.jar") // include the asm jar instead
    }
    classifier = 'universal'
    includeEmptyDirs = false
}

task asmJar(type: Jar) {
    manifest {
        attributes 'FMLCorePlugin': "net.xalcon.torchasm.TorchCorePlugin"
        attributes 'FMLCorePluginContainsFMLMod': "true"
    }
    from(sourceSets.main.output) {
        include "net/xalcon/torchasm/**"
    }
    classifier = 'coremod'
    includeEmptyDirs = false
}

// tell gradle to reobfuscate our jars
reobf {
    // jar is done by default
    // jar { }
    asmJar { }
    universalJar { }
}

static def getBuildNumber() {
    return "$System.env.BUILD_NUMBER" != "null" ? "$System.env.BUILD_NUMBER" : "0"
}